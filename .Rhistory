"datetime" = as.POSIXct(origData$Datetime_GMT, "GMT"))
# remove NA lon/lat rows
dataset <- dataset[!is.na(dataset$lon) & !is.na(dataset$lat), ]
#converte as coordenadas de longitude e latitude para valores de coordenadas numa esfera
# create grid x- and y- coordinates from the longitude/latitude coordinates
library(mapproj)
lambert <- mapproject(dataset$lon, dataset$lat, projection = "lambert", parameters = c(mean(dataset$lon), mean(dataset$lat)))
scale <- haversineDist(min(dataset$lon), min(dataset$lat), max(dataset$lon), max(dataset$lat))/projectDist(min(lambert$x), min(lambert$y), max(lambert$x), max(lambert$y), 1)
dataset$x <- lambert$x * scale
dataset$y <- lambert$y * scale
# --------------------- CALCULATING RESIDENCE VALUES --------------------- #
# create a time array: duration of trip in given time units
time_units = "mins" # one of "secs", "mins", "hours", "days", "weeks"
# Certificar-se de que este esta em ordem seq|encial sem valores duplicados
# Raio deve ser escolhido em torno da escala de movimento esperado. Tambim i ztil aumentar a resolugco de incrementos de raios
# Perto de onde a proporgco de pontos de trbnsito cai abaixo de 0,05. Vocj provavelmente precisara executar este uma par de vezes para refinar.
threshold <- rep(0, length(radius))
# determine the different individuals
bandIDs <- unique(dataset$band)
# Para cada faixa, calcule os valores de residjncia
# Se uma faixa nunca sai do raio escolhido, isso resultara em NAs para tempo de residjncia, distbncia e resmduos e um aviso associado.
# Para calculos residenciais e residuais, NA i atribumdo a
# (1) locais no inmcio das faixas ati que o animal se move para alim de R a partir do ponto inicial,
# (2) para os locais no final que estco todos dentro de R do zltimo raio construmdo.
all_tracks = data.frame()
for (i in 1:length(bandIDs)) {
subdata = dataset[dataset$band == bandIDs[i], ]
subdata$time_diff = as.numeric(subdata$datetime - subdata$datetime[1], units = time_units)
result  <- residenceCalc(subdata$x, subdata$y, subdata$time_diff, radius, threshold)
subdata = cbind(subdata, result)
all_tracks = rbind(all_tracks, subdata)
}
#### ************************************************************************
#### ***              END RST METHOD (TORRES et al., 2017)                ***
#### ************************************************************************
#### *****************************************************************************
#### ***  BEHAVIOR CLASSIFICATION BASED ON RESULTS OF THE RST METHOD  (AUTORA) ***
#### *****************************************************************************
colnames(all_tracks)[which(names(all_tracks) == names(select(all_tracks, contains("res"))))] <- "res"
#############################################################################################################
### ALGORITHM: Correlation Verification between animal movement data and environmental factors
### *********************************************************************************************************
### INPUT DATA (database): individual <!-- ID animal -->
###                        lat        <!-- Animal position - latitude -->
###                        lon        <!-- Animal position - longitude -->
###                        datetime   <!-- date and time of movement register -->
###
### OUTPUT DATA (ASSOCIATION RULES):
###         basic measures (support and confidence)
###         interest measures (phi/lift)
###         degree dependence (Dep)
###
##############################################################################################################
#install.packages("hab", repos = "http://ase-research.org/R/")
#install.packages("hab", repos = "http://ase-research.org/R/", type = "source") #linux
setwd("~/")
#### *******************************************
#### ***       PREPARE THE R LIBRARIES       ***
#### *******************************************
library(adehabitatLT)
library(RMySQL)
library(arules)
library(sp)
library(chron)
library(varhandle)
library(adehabitatHR)
library (lubridate)
library(outliers)
library (stats)
library(mapproj)
library(stringr)
library(geosphere)
library(randomcoloR)
library(vcd)
library(widyr)
library(shiny)
library(ggrepel)
library(hms)
library(dplyr)
library(leaflet)
library(arulesViz)
library(mapview)
library(ggplot2)
#### *******************************************
#### ***    INITIALIZE INPUT PARAMETERS      ***
#### *******************************************
### INPUT DATA (user defined parameters):
###   * distRadius: indicates the maximum size of the distance radius, in meters. This value is used to limit the search radius around each
###           location point (latitude/longitude) and time (date/time) of the animal movement to the analysis of the distance between points
###   * min_interval: interval in minutes, used to calculate the occurrence range of the environmental factor;
###   * min_sup:  % mininum of frequency that the set A and B appear in the transaction set. It is calculated using the total
###               frequency divided by total record;
###   * min_conf: % mininum of frequency that B appears in transactions containing A. It is calculated using the Sup value
###               divided by frequency of A;
###   Apriori uses the SupM and ConfM parameters to determine which rules are relevant to the analysis
#### *******************************************
#### ************************************************************************
#### ***                  PREPARA O BANCO DE DADOS                        ***
#### ************************************************************************
conn <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
data <- dbSendQuery(conn, "call PrepareDB();")
#### ************************************************************************
#### ***            STEP A - IDENTIFY THE ANIMAL BEHAVIOR                 ***
#### ************************************************************************
#############################################################################
## ---->>>>  A1. IDENTIFY THE STATES OF ANIMAL BEHAVIOR
##
## DYNAMIC SCALING CODE FOR USING THE RESIDUAL METHOD OVER A TRACKING DATASET
## Modified from Irina Tolkova, November 2015
## Rachael Orben, November 2015
#############################################################################
# --------------------- LOADING FUNCTIONS AND LIBRARIES ------------------- #
# clear workspace and set working directory
#rm(list = ls())
# load C function, secondary functions, plotting functions
dyn.load("RST_residenceRadii.dll") # if using Windows
source("RST_functions_all.R")
#radius <- params$dist
radius <- 0.4
# --------------------- PREPARING DATASET --------------------- #
#dbClearResult(dbListResults(conn)[[1]])
conn <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
data <- dbSendQuery(conn, "select M.individual as band, date as 'Datetime_GMT',  M.lat as 'lat', M.lon as 'lon'  from tb_mov_animal M;")
#conn <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
#data <- dbSendQuery(conn, "SELECT `tb_animal_movement`.`individual.local.identifier` as band, `tb_animal_movement`.`timestamp` as #'Datetime_GMT',  `tb_animal_movement`.`location.long` as 'lon',  `tb_animal_movement`.`location.lat` as 'lat' FROM #tb_animal_movement;")
#armazena os dados numa variavel
origData <- fetch(data, n = -1)
#### ************************************************************************
#### *** RESIDENCE IN SPACE AND TIME METHOD (RST) (TORRES et al., 2017)
#### ************************************************************************
# construct a dataset for analysis (take the band identifiers, longitude, latitude, and time columns from the original data)
# the unique identifier "band" needs to be numeric
dataset <- data.frame("band" = origData$band,
"lat" = origData$lat,
"lon" = origData$lon,
"datetime" = as.POSIXct(origData$Datetime_GMT, "GMT"))
# remove NA lon/lat rows
dataset <- dataset[!is.na(dataset$lon) & !is.na(dataset$lat), ]
#converte as coordenadas de longitude e latitude para valores de coordenadas numa esfera
# create grid x- and y- coordinates from the longitude/latitude coordinates
library(mapproj)
lambert <- mapproject(dataset$lon, dataset$lat, projection = "lambert", parameters = c(mean(dataset$lon), mean(dataset$lat)))
scale <- haversineDist(min(dataset$lon), min(dataset$lat), max(dataset$lon), max(dataset$lat))/projectDist(min(lambert$x), min(lambert$y), max(lambert$x), max(lambert$y), 1)
dataset$x <- lambert$x * scale
dataset$y <- lambert$y * scale
# --------------------- CALCULATING RESIDENCE VALUES --------------------- #
# create a time array: duration of trip in given time units
time_units = "mins" # one of "secs", "mins", "hours", "days", "weeks"
# Certificar-se de que este esta em ordem seq|encial sem valores duplicados
# Raio deve ser escolhido em torno da escala de movimento esperado. Tambim i ztil aumentar a resolugco de incrementos de raios
# Perto de onde a proporgco de pontos de trbnsito cai abaixo de 0,05. Vocj provavelmente precisara executar este uma par de vezes para refinar.
threshold <- rep(0, length(radius))
# determine the different individuals
bandIDs <- unique(dataset$band)
# Para cada faixa, calcule os valores de residjncia
# Se uma faixa nunca sai do raio escolhido, isso resultara em NAs para tempo de residjncia, distbncia e resmduos e um aviso associado.
# Para calculos residenciais e residuais, NA i atribumdo a
# (1) locais no inmcio das faixas ati que o animal se move para alim de R a partir do ponto inicial,
# (2) para os locais no final que estco todos dentro de R do zltimo raio construmdo.
all_tracks = data.frame()
for (i in 1:length(bandIDs)) {
subdata = dataset[dataset$band == bandIDs[i], ]
subdata$time_diff = as.numeric(subdata$datetime - subdata$datetime[1], units = time_units)
result  <- residenceCalc(subdata$x, subdata$y, subdata$time_diff, radius, threshold)
subdata = cbind(subdata, result)
all_tracks = rbind(all_tracks, subdata)
}
#### ************************************************************************
#### ***              END RST METHOD (TORRES et al., 2017)                ***
#### ************************************************************************
#### *****************************************************************************
#### ***  BEHAVIOR CLASSIFICATION BASED ON RESULTS OF THE RST METHOD  (AUTORA) ***
#### *****************************************************************************
colnames(all_tracks)[which(names(all_tracks) == names(select(all_tracks, contains("res"))))] <- "res"
library(dplyr)
#############################################################################################################
### ALGORITHM: Correlation Verification between animal movement data and environmental factors
### *********************************************************************************************************
### INPUT DATA (database): individual <!-- ID animal -->
###                        lat        <!-- Animal position - latitude -->
###                        lon        <!-- Animal position - longitude -->
###                        datetime   <!-- date and time of movement register -->
###
### OUTPUT DATA (ASSOCIATION RULES):
###         basic measures (support and confidence)
###         interest measures (phi/lift)
###         degree dependence (Dep)
###
##############################################################################################################
#install.packages("hab", repos = "http://ase-research.org/R/")
#install.packages("hab", repos = "http://ase-research.org/R/", type = "source") #linux
setwd("~/")
#### *******************************************
#### ***       PREPARE THE R LIBRARIES       ***
#### *******************************************
library(adehabitatLT)
library(RMySQL)
library(arules)
library(sp)
library(chron)
library(varhandle)
library(adehabitatHR)
library (lubridate)
library(outliers)
library (stats)
library(mapproj)
library(stringr)
library(geosphere)
library(randomcoloR)
library(vcd)
library(widyr)
library(shiny)
library(ggrepel)
library(hms)
library(dplyr)
library(leaflet)
library(arulesViz)
library(mapview)
library(ggplot2)
library(conflicted)
install.packge("conflicted")
install.package("conflicted")
#### *********************************************************************************************
#### ***  A5. IDENTIFY THE HOME RANGE BY BEHAVIORAL ID/MONTH/YEAR (AUTORA) WITH COVER SOIL     ***
#### *********************************************************************************************
if (params$soil == 'S') {
#library(raster)
library(sf)
library(RColorBrewer)
library(rgdal)
# Load shapefile
#shapename <- read_sf('C:/Users/suela/Downloads/shape_taiama/shape_taiama2.shp')
shapename <- read_sf('C:/Users/suela/Downloads/shape_taiama/sp_taiama_2018/sp_taiama_2018.shp')
dse <- as.data.frame(shapename$DN)
dse
ds  <- filter (dse, dse$`shapename$DN`!= 0)
pal <- leaflet::colorFactor(palette = c("0" = "#00FFFFFF", "3" = "#228B22",
"4" = "#DAA520",    "11" = "#808000",
"12" = "#D2691E",  "15"= "#FFD700", "33" = "#0000FF"),  domain = shapename$DN)
#popup <- paste0("<strong>Name: </strong>", shapename$DN)
map <- leaflet()%>% addTiles() %>%
addMapPane("cover", zIndex = 410) %>%
addMapPane("home",  zIndex = 420) %>%
addPolygons(data=shapename, weight = 2, stroke  = FALSE,
color = "transparent", smoothFactor = 0.1,
fillColor = ~pal(shapename$DN),
fillOpacity = 0.5,
group = "Soil Coverage",
options = pathOptions(pane = "cover"),
labelOptions = labelOptions(noHide = T))  %>%
addLegend(pal = pal, values = shapename$DN, group = "Soil Coverage", position = "bottomleft")
yearIdTraj = unique(burst(trajMoveYMIDE))
trajdata = ld(trajMoveYMIDE)
individual =  unique(trajdata$individual)
groups = as.character(yearIdTraj)
i = 1
palette <- distinctColorPalette(length(individual))
ls = list()
for (i in 1:length(individual)) {
x <- as.character(individual [i])
ls[[x]] = palette[i]
i = i +1
}
for (i in 1:length(yearIdTraj)) {
reloc <-summary(trajMoveYMIDE[i])
if (reloc$nb.reloc >= 5) {
dsM1 = ld(trajMoveYMIDE[i])
ano = as.character(unique(paste(substring(burst(trajMoveYMIDE[i]), 1, 4), sep="")))
mon = as.character(unique(paste(substring(burst(trajMoveYMIDE[i]), 6, 7), sep="")))
id  = dsM1[c("id")]
animal  = unique(dsM1[c("individual")])
cor = as.character(ls[animal[,1]])
prj <- '+init=epsg:26911'
sp <- SpatialPoints(coords = dsM1[c("lon", "lat")], proj4string = CRS(prj))
kd <- kernelUD(sp)
ud <- getverticeshr(kd, grid= 1200, percent =30)
map <- map%>% addPolygons(data = ud, label = burst(trajMoveYMIDE[i]),
labelOptions = labelOptions(noHide = T),
options = pathOptions(pane = "home"),
group = burst(trajMoveYMIDE[i]),  stroke = TRUE,
color = "black", weight = 1, opacity = 0.7,
fillColor = cor,  fillOpacity = 1)
}
}
map %>%addLayersControl(overlayGroups = groups, options = layersControlOptions(collapsed = FALSE))%>% hideGroup(groups)
}
setwd("~/GitHub/AniMoveMiner-master/AniMoveMiner")
#############################################################################################################
### ALGORITHM: Correlation Verification between animal movement data and environmental factors
### *********************************************************************************************************
### INPUT DATA (database): individual <!-- ID animal -->
###                        lat        <!-- Animal position - latitude -->
###                        lon        <!-- Animal position - longitude -->
###                        datetime   <!-- date and time of movement register -->
###
### OUTPUT DATA (ASSOCIATION RULES):
###         basic measures (support and confidence)
###         interest measures (phi/lift)
###         degree dependence (Dep)
###
##############################################################################################################
#install.packages("hab", repos = "http://ase-research.org/R/")
#install.packages("hab", repos = "http://ase-research.org/R/", type = "source") #linux
setwd("~/")
#### *******************************************
#### ***       PREPARE THE R LIBRARIES       ***
#### *******************************************
library(adehabitatLT)
library(RMySQL)
library(arules)
library(sp)
library(chron)
library(varhandle)
library(adehabitatHR)
library (lubridate)
library(outliers)
library (stats)
library(mapproj)
library(stringr)
library(geosphere)
library(randomcoloR)
library(vcd)
library(widyr)
library(shiny)
library(ggrepel)
library(hms)
library(dplyr)
library(leaflet)
library(arulesViz)
library(mapview)
library(ggplot2)
#### *******************************************
#### ***    INITIALIZE INPUT PARAMETERS      ***
#### *******************************************
### INPUT DATA (user defined parameters):
###   * distRadius: indicates the maximum size of the distance radius, in meters. This value is used to limit the search radius around each
###           location point (latitude/longitude) and time (date/time) of the animal movement to the analysis of the distance between points
###   * min_interval: interval in minutes, used to calculate the occurrence range of the environmental factor;
###   * min_sup:  % mininum of frequency that the set A and B appear in the transaction set. It is calculated using the total
###               frequency divided by total record;
###   * min_conf: % mininum of frequency that B appears in transactions containing A. It is calculated using the Sup value
###               divided by frequency of A;
###   Apriori uses the SupM and ConfM parameters to determine which rules are relevant to the analysis
#### *******************************************
#### ************************************************************************
#### ***                  PREPARA O BANCO DE DADOS                        ***
#### ************************************************************************
conn <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
data <- dbSendQuery(conn, "call PrepareDB();")
#############################################################################################################
### ALGORITHM: Correlation Verification between animal movement data and environmental factors
### *********************************************************************************************************
### INPUT DATA (database): individual <!-- ID animal -->
###                        lat        <!-- Animal position - latitude -->
###                        lon        <!-- Animal position - longitude -->
###                        datetime   <!-- date and time of movement register -->
###
### OUTPUT DATA (ASSOCIATION RULES):
###         basic measures (support and confidence)
###         interest measures (phi/lift)
###         degree dependence (Dep)
###
##############################################################################################################
#install.packages("hab", repos = "http://ase-research.org/R/")
#install.packages("hab", repos = "http://ase-research.org/R/", type = "source") #linux
setwd("~/")
#### *******************************************
#### ***       PREPARE THE R LIBRARIES       ***
#### *******************************************
library(adehabitatLT)
library(RMySQL)
library(arules)
library(sp)
library(chron)
library(varhandle)
library(adehabitatHR)
library (lubridate)
library(outliers)
library (stats)
library(mapproj)
library(stringr)
library(geosphere)
library(randomcoloR)
library(vcd)
library(widyr)
library(shiny)
library(ggrepel)
library(hms)
library(dplyr)
library(leaflet)
library(arulesViz)
library(mapview)
library(ggplot2)
#### *******************************************
#### ***    INITIALIZE INPUT PARAMETERS      ***
#### *******************************************
### INPUT DATA (user defined parameters):
###   * distRadius: indicates the maximum size of the distance radius, in meters. This value is used to limit the search radius around each
###           location point (latitude/longitude) and time (date/time) of the animal movement to the analysis of the distance between points
###   * min_interval: interval in minutes, used to calculate the occurrence range of the environmental factor;
###   * min_sup:  % mininum of frequency that the set A and B appear in the transaction set. It is calculated using the total
###               frequency divided by total record;
###   * min_conf: % mininum of frequency that B appears in transactions containing A. It is calculated using the Sup value
###               divided by frequency of A;
###   Apriori uses the SupM and ConfM parameters to determine which rules are relevant to the analysis
#### *******************************************
#### ************************************************************************
#### ***                  PREPARA O BANCO DE DADOS                        ***
#### ************************************************************************
conn <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
data <- dbSendQuery(conn, "call PrepareDB();")
#### ************************************************************************
#### ***          LÊ ARQUIVO (.CSV) E GRAVA NAS TABELAS DO MsqSQL         ***
#### ************************************************************************
#df  <- read.csv(file=params$data, header=TRUE, sep=",")
#df2 <- read.csv(file=params$data1, header=TRUE, sep=",")
#dbWriteTable(conn, value = df, name = "tb_animal_movement", row.names=F, append = T)
#dbWriteTable(conn, value = df2, name = "tb_fator_ambiente", row.names=F, append = T)
#### ************************************************************************
#### ***            STEP A - IDENTIFY THE ANIMAL BEHAVIOR                 ***
#### ************************************************************************
#############################################################################
## ---->>>>  A1. IDENTIFY THE STATES OF ANIMAL BEHAVIOR
##
## DYNAMIC SCALING CODE FOR USING THE RESIDUAL METHOD OVER A TRACKING DATASET
## Modified from Irina Tolkova, November 2015
## Rachael Orben, November 2015
#############################################################################
# --------------------- LOADING FUNCTIONS AND LIBRARIES ------------------- #
# clear workspace and set working directory
#rm(list = ls())
# load C function, secondary functions, plotting functions
dyn.load("RST_residenceRadii.dll") # if using Windows
source("RST_functions_all.R")
#radius <- params$dist
radius <- 0.4
# --------------------- PREPARING DATASET --------------------- #
#dbClearResult(dbListResults(conn)[[1]])
conn <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
data <- dbSendQuery(conn, "select M.individual as band, date as 'Datetime_GMT',  M.lat as 'lat', M.lon as 'lon'  from tb_mov_animal M;")
#conn <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
#data <- dbSendQuery(conn, "SELECT `tb_animal_movement`.`individual.local.identifier` as band, `tb_animal_movement`.`timestamp` as #'Datetime_GMT',  `tb_animal_movement`.`location.long` as 'lon',  `tb_animal_movement`.`location.lat` as 'lat' FROM #tb_animal_movement;")
#armazena os dados numa variavel
origData <- fetch(data, n = -1)
#### ************************************************************************
#### *** RESIDENCE IN SPACE AND TIME METHOD (RST) (TORRES et al., 2017)
#### ************************************************************************
# construct a dataset for analysis (take the band identifiers, longitude, latitude, and time columns from the original data)
# the unique identifier "band" needs to be numeric
dataset <- data.frame("band" = origData$band,
"lat" = origData$lat,
"lon" = origData$lon,
"datetime" = as.POSIXct(origData$Datetime_GMT, "GMT"))
# remove NA lon/lat rows
dataset <- dataset[!is.na(dataset$lon) & !is.na(dataset$lat), ]
#converte as coordenadas de longitude e latitude para valores de coordenadas numa esfera
# create grid x- and y- coordinates from the longitude/latitude coordinates
library(mapproj)
lambert <- mapproject(dataset$lon, dataset$lat, projection = "lambert", parameters = c(mean(dataset$lon), mean(dataset$lat)))
scale <- haversineDist(min(dataset$lon), min(dataset$lat), max(dataset$lon), max(dataset$lat))/projectDist(min(lambert$x), min(lambert$y), max(lambert$x), max(lambert$y), 1)
dataset$x <- lambert$x * scale
dataset$y <- lambert$y * scale
# --------------------- CALCULATING RESIDENCE VALUES --------------------- #
# create a time array: duration of trip in given time units
time_units = "mins" # one of "secs", "mins", "hours", "days", "weeks"
# Certificar-se de que este esta em ordem seq|encial sem valores duplicados
# Raio deve ser escolhido em torno da escala de movimento esperado. Tambim i ztil aumentar a resolugco de incrementos de raios
# Perto de onde a proporgco de pontos de trbnsito cai abaixo de 0,05. Vocj provavelmente precisara executar este uma par de vezes para refinar.
threshold <- rep(0, length(radius))
# determine the different individuals
bandIDs <- unique(dataset$band)
# Para cada faixa, calcule os valores de residjncia
# Se uma faixa nunca sai do raio escolhido, isso resultara em NAs para tempo de residjncia, distbncia e resmduos e um aviso associado.
# Para calculos residenciais e residuais, NA i atribumdo a
# (1) locais no inmcio das faixas ati que o animal se move para alim de R a partir do ponto inicial,
# (2) para os locais no final que estco todos dentro de R do zltimo raio construmdo.
all_tracks = data.frame()
for (i in 1:length(bandIDs)) {
subdata = dataset[dataset$band == bandIDs[i], ]
subdata$time_diff = as.numeric(subdata$datetime - subdata$datetime[1], units = time_units)
result  <- residenceCalc(subdata$x, subdata$y, subdata$time_diff, radius, threshold)
subdata = cbind(subdata, result)
all_tracks = rbind(all_tracks, subdata)
}
#### ************************************************************************
#### ***              END RST METHOD (TORRES et al., 2017)                ***
#### ************************************************************************
#### *****************************************************************************
#### ***  BEHAVIOR CLASSIFICATION BASED ON RESULTS OF THE RST METHOD  (AUTORA) ***
#### *****************************************************************************
colnames(all_tracks)[which(names(all_tracks) == names(select(all_tracks, contains("res"))))] <- "res"
#### ************************************************************************
#### ***            STEP A - IDENTIFY THE ANIMAL BEHAVIOR                 ***
#### ************************************************************************
#############################################################################
## ---->>>>  A1. IDENTIFY THE STATES OF ANIMAL BEHAVIOR
##
## DYNAMIC SCALING CODE FOR USING THE RESIDUAL METHOD OVER A TRACKING DATASET
## Modified from Irina Tolkova, November 2015
## Rachael Orben, November 2015
#############################################################################
# --------------------- LOADING FUNCTIONS AND LIBRARIES ------------------- #
# clear workspace and set working directory
#rm(list = ls())
# load C function, secondary functions, plotting functions
dyn.load("RST_residenceRadii.dll") # if using Windows
source("RST_functions_all.R")
#radius <- params$dist
radius <- 0.4
# --------------------- PREPARING DATASET --------------------- #
#dbClearResult(dbListResults(conn)[[1]])
conn <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
