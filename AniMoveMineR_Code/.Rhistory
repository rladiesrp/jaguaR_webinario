#####################################################################################################################
###  A3.1 PERIODS WITHOUT OUTLIERS (dtMovClr) (AUTORA)
#####################################################################################################################
dt1 <- unfactor(as.data.frame(outOutlier))
dt2 <- unfactor(as.data.frame(out))
dto <- unique(dt1$burst)
i= 1
# for each id, year, month, state
for (i in 1:length(dto)){
da  = filter (dt1, dt1$burst == dto[i])
dt2 = filter (dt2, !(da$burst == dt2$yearmonidest & (dt2$difSeqM == 0)))
dt2 = filter (dt2, !(da$burst == dt2$yearmonidest & (da$outSup == dt2$difSeqM)))
dt2 = filter (dt2, !(da$burst == dt2$yearmonidest & (da$outInf == dt2$difSeqM)))
dt2 = filter (dt2, !(da$burst == dt2$yearmonidest & (as.integer(dt2$difSeqM) > (as.integer(da$mean) * 2))))
}
dtMovClr = dt2
# CREATE TABLE TO BEHAVIOR STATE
connMove <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
dbWriteTable(connMove, value = dtMovClr, name = "TBPeriodState", row.names=F, append = T)
dat <- dbSendQuery(connMove, "call calcTotalStatePeriod();")
ds <- fetch(dat,n = -1)
da <- as.data.frame(ds)
#####################################################################################################################
####      A4. IDENTIFY THE PERIODS FREQUENT OF BEHAVIOR STATE OCCURRENCE
###  IDENTIFIES THE MOST FREQUENT PERIODS (tbperiodfreq) AND LESS FREQUENT (tbperiodfreqLess)
#####################################################################################################################
#####################################################################################################################
###  A4.1   IDENTIFY INTERSECTIONS BETWEEN THE PERIODS  (AUTORA)
#####################################################################################################################
i = 1
r = 1
x = 1
nper=0
lsSeq = list()
dt = as.data.frame(dtMovClr)
# identifies unique yearmonidest
dta <- unique(dt$yearmonidest)
#to each year/month/ id/state
for (i in 1:length(dta)){
# filters the smallest and longest period
ds <- filter (dt, as.character(dt$yearmonidest) == as.character(dta[i]))
ds <- arrange(ds, ds$yearmonidest,ds$minSeq, ds$maxSeq)
ds1 <- data.frame( yearmonidest = c(ds$yearmonidest), id=c(ds$id), estado = c(ds$estado),
yearSeq = c(ds$yearSeq), minSeq = c(ds$minSeq), maxSeq = c(ds$maxSeq),
monSeq = c(ds$mon))
tam = nrow(ds1)
# to each period
for (r in 1:tam) {
# reads the current period
dsN <- ds1[r,]
if (r == 1){
minS = dsN$minSeq
maxS = dsN$maxSeq
}
# reads the next period
dsN1 <- ds1[r+1,]
if (is.na(dsN1$minSeq) == FALSE) {
if ((format(as.POSIXct(dsN1$minSeq, format = "%H:%M"),'%H:%M') >=
format(as.POSIXct(minS, format = "%H:%M"),'%H:%M')  &
format(as.POSIXct(dsN1$minSeq, format = "%H:%M"),'%H:%M') <=
format(as.POSIXct(maxS, format = "%H:%M"),'%H:%M')) &
(format(as.POSIXct(dsN1$maxSeq, format = "%H:%M"),'%H:%M') >=
format(as.POSIXct(minS, format = "%H:%M"),'%H:%M')  &
format(as.POSIXct(dsN1$maxSeq, format = "%H:%M"),'%H:%M') <=
format(as.POSIXct(maxS, format = "%H:%M"),'%H:%M'))){
r = r +1
nper = nper + 1
}else if ((format(as.POSIXct(dsN1$minSeq, format = "%H:%M"),'%H:%M') >=
format(as.POSIXct(minS, format = "%H:%M"),'%H:%M') &
format(as.POSIXct(dsN1$minSeq, format = "%H:%M"),'%H:%M') <=
format(as.POSIXct(maxS, format = "%H:%M"),'%H:%M')) &
(format(as.POSIXct(dsN1$maxSeq, format = "%H:%M"),'%H:%M') >=
format(as.POSIXct(minS, format = "%H:%M"),'%H:%M') &
format(as.POSIXct(dsN1$maxSeq, format = "%H:%M"),'%H:%M') >=
format(as.POSIXct(maxS, format = "%H:%M"),'%H:%M'))) {
maxS =  dsN1$maxSeq
r = r +1
nper = nper + 1
}else if ((format(as.POSIXct(dsN1$minSeq, format = "%H:%M"),'%H:%M') >
format(as.POSIXct(minS, format = "%H:%M"),'%H:%M') &
format(as.POSIXct(dsN1$minSeq, format = "%H:%M"),'%H:%M') >
format(as.POSIXct(minS, format = "%H:%M"),'%H:%M') &
format(as.POSIXct(dsN1$minSeq, format = "%H:%M"),'%H:%M') <=
format(as.POSIXct(maxS, format = "%H:%M") + minutes(60),'%H:%M'))) {
maxS =  dsN1$maxSeq
r = r +1
nper = nper + 1
}else {
lsSeq[[x]] =  c(yearmonidest = as.character(dsN$yearmonidest), id=as.character(dsN$id),
estado = as.character(dsN$estado), yearSeq = as.character(dsN$yearSeq),
monSeq = as.character(dsN$monSeq),
minSeq = format(as.POSIXct(minS, format = "%H:%M"),'%H:%M'),
maxSeq = format(as.POSIXct(maxS, format = "%H:%M"),'%H:%M'), n=nper)
x = x +1
nper = 0
minS = dsN1$minSeq
maxS = dsN1$maxSeq
r = r +1
}
}else {
lsSeq[[x]] =  c(yearmonidest  = as.character(dsN$yearmonidest), id=as.character(dsN$id),
estado = as.character(dsN$estado), yearSeq = as.character(dsN$yearSeq),
monSeq = as.character(dsN$monSeq),
minSeq = format(as.POSIXct(minS, format = "%H:%M"),'%H:%M'),
maxSeq = format(as.POSIXct(maxS, format = "%H:%M"),'%H:%M'), n=nper)
x = x +1
r = 1
nper = 0
}
}
}
outPeriod = do.call(rbind, lsSeq)
allperiod = as.data.frame(outPeriod)
#####################################################################################################################
###  A4.2   PERIODS FREQUENTS TOP 1 (AUTORA)
#####################################################################################################################
# most frequent periods per year/month/animal/state (top 1)
periodTopN = allperiod %>% group_by(yearmonidest)%>% top_n(max(as.integer(allperiod$n)))
#####################################################################################################################
###  A4.3   PERIODS LESS FREQUENTS (AUTORA)
#####################################################################################################################
tbperiodfreqLess  = filter (periodTopN, (n == "1" | n == "0"))
#####################################################################################################################
###  A4.4   PERIODS MOST FREQUENTS (AUTORA)
#####################################################################################################################
tbperiodfreq = filter (periodTopN, (n != "1" &  n != "0"))
# CREATE TABLE TO BEHAVIOR STATE
connMove <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
dbWriteTable(connMove, value = tbperiodfreq, name = "TB_Periodo_Freq", row.names=F, append = T)
#### **************************************************************************************************
#### ***      >>>>    STATE BEHARIOR MATRIX   (AUTORA)
#### **************************************************************************************************
df <- as.data.frame(out)
dfYear <- unique (paste(df$yearId, df$mon, sep= ""))
i = 1
while (i <= length(dfYear)) {
df <- as.data.frame(out)
anoid = as.character(dfYear[i])
df =  filter(df, paste(df$yearId, df$mon, sep= "")  == anoid)
df$DD <- day(df$date)
df$startHH <- as.numeric(substring(df$minSeq, 1, 2))
df$endHH <- as.numeric(substring(df$maxSeq, 1, 2))
nameFile = as.character(paste(dfYear[i],"MatrixYearMon.png", sep = ""))
png(nameFile)
print({
p <- ggplot(df,aes(xmin = startHH, xmax = endHH + 1, ymin = DD-0.5, ymax = DD + 0.5)) +
geom_rect(aes(fill = df$estado), col="black") +
guides(fill=guide_legend(title="State")) +
scale_x_continuous(breaks=0:23,limits=c(0,23)) +
scale_y_continuous(breaks=0:31,limits=c(0,31)) +
theme_bw() +
labs(#title="Animal Behavior States\n",
subtitle= paste("Animal:", df$id, sep=""), caption= paste("Month/Year: ", df$mon, "/", df$yearSeq, sep="")) +
xlab("Hours") + ylab("Days")
})
dev.off()
i = i +1
}
setwd("~/GitHub/AniMoveMiner-master/AniMoveMiner/AniMoveMineR_Code")
#### **************************************************************************************************
#### ***      >>>>    STATE BEHARIOR MATRIX   (AUTORA)
#### **************************************************************************************************
df <- as.data.frame(out)
dfYear <- unique (paste(df$yearId, df$mon, sep= ""))
i = 1
while (i <= length(dfYear)) {
df <- as.data.frame(out)
anoid = as.character(dfYear[i])
df =  filter(df, paste(df$yearId, df$mon, sep= "")  == anoid)
df$DD <- day(df$date)
df$startHH <- as.numeric(substring(df$minSeq, 1, 2))
df$endHH <- as.numeric(substring(df$maxSeq, 1, 2))
nameFile = as.character(paste(dfYear[i],"MatrixYearMon.png", sep = ""))
png(nameFile)
print({
p <- ggplot(df,aes(xmin = startHH, xmax = endHH + 1, ymin = DD-0.5, ymax = DD + 0.5)) +
geom_rect(aes(fill = df$estado), col="black") +
guides(fill=guide_legend(title="State")) +
scale_x_continuous(breaks=0:23,limits=c(0,23)) +
scale_y_continuous(breaks=0:31,limits=c(0,31)) +
theme_bw() +
labs(#title="Animal Behavior States\n",
subtitle= paste("Animal:", df$id, sep=""), caption= paste("Month/Year: ", df$mon, "/", df$yearSeq, sep="")) +
xlab("Hours") + ylab("Days")
})
dev.off()
i = i +1
}
#### ************************************************************************************************
#### ***        GRAPH WITH THE AVERAGE TIME OF STATE DURATION BY ANIMAL/MONTH/YEAR                ***
#### ************************************************************************************************
df = filter(dtMovClr, difSeqM > 0)
dt = df%>%group_by(id, estado, yearSeq, mon)%>%summarise(mean = mean(as.numeric(difSeqM)))
dt = as.data.frame(dt)
dfId = unique(dt$id)
i= 1
#para cada id, ano, mes, estado
for (i in 1:length(dfId)){
da = filter(dt, dt$id == dfId[i])
monyear = paste(da$year, "-", str_pad(da$mon, 2, pad = "0"), sep = "")
sd = sd(da$mean)
p <-  ggplot(data=da, aes(x=as.character(monyear),
y=substring(hms((as.integer(as.character(mean)) *60)), 1, 2), group=estado)) +
geom_line(aes(color=estado))+
geom_point(aes(color=estado)) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) + scale_color_discrete(name = "State") +
labs(title="Average duration of Animal Behavior by Month/Year\n",
subtitle= paste("Animal:", da$id, sep=""), caption= paste("Ano: ", da$yearSeq, sep="")) +
xlab("Year/Month") + ylab("Time (h)")  + geom_smooth(aes(color=estado), linetype = "dashed",
method=lm, se=FALSE, fullrange=TRUE)
plot(p)
}
#### *********************************************************************************************
#### *** >>> RESULT: STATE BEHAVIOR BY HOURS INTERVALS (AUTORA)
#### *********************************************************************************************
df = as.data.frame(tbperiodfreq)
dfid <- unique (paste(df$id, df$estado, sep = ""))
i = 1
for (i in 1:length(dfid)){
da =  filter(df, paste(df$id, df$estado, sep = "") == dfid[i])
monyear = paste(da$yearSeq, "-", str_pad(da$monSeq, 2, pad = "0"), sep = "")
p <-  ggplot() + geom_pointrange(data=da, mapping=aes(x=as.character(monyear),
y = format(as.POSIXct(minSeq, format = "%H"),'%H'),
ymin=format(as.POSIXct(minSeq, format = "%H"),'%H'),
ymax= format(as.POSIXct(maxSeq, format = "%H"),'%H'),
color = estado), size=1, shape=20) + labs(color='Estado') +
scale_colour_manual(values = c("Rest" = "blue", "Forage" = "red",  "Transit" = "green")) +
theme_bw() + theme(plot.title = element_text(hjust = 0.4),
axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title="Time interval between occurrence of behavioral state\n",
subtitle= paste("Animal:", da$id, sep=""), caption= paste("Year: ", da$yearSeq, sep="")) +
xlab("Year/Month") + ylab("Hours")
plot(p)
}
#### *********************************************************************************************
#### *** CHART:                BEHAVIORAL CHARTS PER PERIOD OF THE DAY  (GENERAL)             ***
#### *********************************************************************************************
conn <- dbConnect(MySQL(), user="root", db="weka", host="localhost")
data <- dbSendQuery(conn, "select  C.id, C.yearSeq, C.mon, C.estado,
(CASE WHEN C.periodo = 'D' THEN 'Day' WHEN C.periodo = 'N' THEN 'Night' WHEN C.periodo = 'DN' THEN 'Day/Night' END) periodo,
C.yearmonidest, count(C.periodo) totalbyPeriod, A.total_ocorr,
(select count(periodo) From  TBPeriodState where C.yearmonidest = yearmonidest group by yearmonidest) totalByState From  TBPeriodState C,
(select B.yearid, B.mon, count(B.mon) total_ocorr  From TBPeriodState B  group by B.yearid, B.mon) A  where  A.yearid =  C.yearid and
A.mon = C.mon group by C.yearmonidest, C.periodo order by C.yearmonidest, totalbyPeriod desc;")
ds <- fetch(data,n = -1)
df <- as.data.frame(ds)
dfid <-  unique (paste(df$id, df$yearSeq, sep = ""))
i = 1
for (i in 1:length(dfid)){
da =  filter(df, paste(df$id, df$yearSeq, sep = "") == dfid[i])
x <-  ggplot(data=da, aes(x=str_pad(mon, 2, pad = "0"), y= totalbyPeriod, group=periodo)) +
geom_line(aes(color=periodo))+
geom_point(aes(color=periodo)) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) + scale_color_discrete(name = "Day period") +
labs(title="Frequency of occurrence of animal behavior states\n",
subtitle= paste("Animal:", da$id, sep=""),
caption= paste("Year: ", da$yearSeq, " | ", "Total occurrences: ", unique(da$total_ocorr), sep="")) +
xlab("Month") + ylab("Occurrences Number")
x <- x +  facet_wrap(~da$estado, ncol=1)
plot(x)
}
dbDisconnect(conn)
#### ******************************************************************************
#### ***  A5. IDENTIFY THE HOME RANGE BY BEHAVIORAL ID/MONTH/YEAR (AUTORA)      ***
#### ******************************************************************************
yearIdTraj = unique(burst(trajMoveYMID))
trajdata = ld(trajMoveYMID)
individual =  unique(trajdata$individual)
groups = as.character(yearIdTraj)
i = 1
map <- leaflet()%>%addTiles
palette <- distinctColorPalette(length(individual))
ls = list()
for (i in 1:length(individual)) {
x <- as.character(individual [i])
ls[[x]] = palette[i]
i = i +1
}
for (i in 1:length(yearIdTraj)) {
reloc <-summary(trajMoveYMID[i])
if (reloc$nb.reloc >= 5) {
dsM1 = ld(trajMoveYMID[i])
ano = as.character(unique(paste(substring(burst(trajMoveYMID[i]), 1, 4), sep="")))
mon = as.character(unique(paste(substring(burst(trajMoveYMID[i]), 6, 7), sep="")))
id  = dsM1[c("id")]
animal  = unique(dsM1[c("individual")])
cor = as.character(ls[animal[,1]])
prj <- '+init=epsg:26911'
sp <- SpatialPoints(coords = dsM1[c("lon", "lat")], proj4string = CRS(prj))
kd <- kernelUD(sp)
ud <- getverticeshr(kd, grid= 1200, percent =30)
map <- map%>% addPolygons(data = ud, label = burst(trajMoveYMID[i]), labelOptions = labelOptions(noHide = T),
group= burst(trajMoveYMID[i]),  stroke = TRUE, color = "black", weight = 1, opacity = 0.7,
fillColor = cor,  fillOpacity = 1)
}
}
map %>% addLayersControl(overlayGroups = groups, options = layersControlOptions(collapsed = FALSE))%>% hideGroup(groups)
#### ******************************************************************************
#### ***  A5. IDENTIFY THE HOME RANGE BY BEHAVIORAL STATE/MONTH/YEAR  (AUTORA)  ***
#### ******************************************************************************
yearIdTraj = unique(burst(trajMoveYMIDE))
groups = as.character(yearIdTraj)
i = 1
map <- leaflet()%>%addTiles
for (i in 1:length(yearIdTraj)) {
reloc <-summary(trajMoveYMIDE[i])
if (reloc$nb.reloc >= 5) {
dsM1 = ld(trajMoveYMIDE[i])
ano = as.character(unique(paste(substring(burst(trajMoveYMIDE[i]), 1, 4), sep="")))
mon = as.character(unique(paste(substring(burst(trajMoveYMIDE[i]), 6, 7), sep="")))
id  = dsM1[c("id")]
animal  = unique(dsM1[c("individual")])
cor = as.character(ls[animal[,1]])
prj <- '+init=epsg:26911'
sp <- SpatialPoints(coords = dsM1[c("lon", "lat")], proj4string = CRS(prj))
kd <- kernelUD(sp)
ud <- getverticeshr(kd, grid= 1200, percent =30)
map <- map%>% addPolygons(data = ud, label = burst(trajMoveYMIDE[i]), labelOptions = labelOptions(noHide = T),
group= burst(trajMoveYMIDE[i]),  stroke = TRUE, color = "black", weight = 1, opacity = 0.7,
fillColor = cor,  fillOpacity = 1)
}
}
map %>% addLayersControl(overlayGroups = groups, options = layersControlOptions(collapsed = FALSE))%>% hideGroup(groups)
#### ****************************************************************************************
#### *** IDENTIFIES CORRELATION BETWEEN ANIMALS AND LAND COVER  - MONTH/YEAR ***
#### ****************************************************************************************
if (params$soil == 'S') {
connAssoc <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
dat <- dbSendQuery(connMove, "call preparaDadosCobertura();")
sql <- "SELECT estado, nm_cobertura, individual, concat(year(timestamp),
month(timestamp), individual) as yearmon, year(timestamp) year, month(timestamp) mon
FROM  TB_RST_MovAnimal_Estado_CopiA B "
dataAssoc <- dbSendQuery(connAssoc,sql)
ds <- fetch(dataAssoc,n = -1)
da <- as.data.frame(ds)
yearmon = unique(da$yearmon)
b = 1
Rule = data.frame()
for (b in 1:length(params$minSupConf)){
a = 1
df = data.frame()
#para cada id, ano, mes
for (a in 1:length(yearmon)){
ym = yearmon[a]
dsAssoc <- filter(da, da$yearmon == ym)
year = substr(ym, 1, 4)
#mon = substr(ym, 5, length(da$yearmon ))
if (length(dsAssoc) > 0){
dsAssoc[] <- lapply(dsAssoc, factor)
indiv = unique(dsAssoc$individual)
mon = unique(dsAssoc$mon)
### transforma em transacao para ser utilizado pelo algoritmo apriori
transDados = as(dsAssoc[1:2], "transactions");
rules = apriori(transDados, parameter=list(support=params$minSupConf[b],
confidence=params$minSupConf[b]));
if (length(rules)!= 0){
ruledf = data.frame(id = ym,
ind = indiv,
year= year,
mon = mon,
lhs = labels(lhs(rules)),
rhs = labels(rhs(rules)),
rules@quality,
supA = support(lhs(rules), transDados),
supB = support(rhs(rules), transDados),
supEsp = (support(lhs(rules), transDados) * support(rhs(rules), transDados)),
test =  paste("mSup=", params$minSupConf[b], "/mConf=", params$minSupConf[b], sep = ""),
interestMeasure(rules, c("phi",  "chiSquared"), significance=TRUE, transDados)
)
plot(sort(rules, by="lift"), method="graph",
main= paste("Month/Year:", mon, "/", year, " | minSup:", params$minSupConf[b],  "
|minConf:", params$minSupConf[b],sep=""), control=list(type="items"))
df <- rbind(df, ruledf)
}
}
}
Rule <- rbind(Rule, df)
}
if (length(Rule) > 0) {
name_file = "TB_Rule_Animal_Animal_Soil"
dbWriteTable(connAssoc, value = Rule, name = name_file, append = T)
SQLRule = "select mon, CONCAT(replace(replace (replace(lhs, '{estado=', ''), '}',''),  '{nm_cobertura=', '') , '/',
replace(replace (replace(rhs, '{estado=', ''), '}',''),  '{nm_cobertura=', '') ) state_cover,
supA, supB, cast((IFNULL(CAST(support AS DECIMAL(6,2)), 1)  * 100) as decimal(3))  'Sup',
cast((IFNULL(CAST(confidence AS DECIMAL(6,2)), 1)  * 100) as decimal(3)) 'Conf',
(CASE WHEN  support = 1 and confidence = 1 and phi is null
THEN cast((IFNULL(CAST(phi AS DECIMAL(6,2)), 1)  * 100) as decimal(3))
Else  cast((CAST(phi AS DECIMAL(6,2))  * 100) as decimal(2)) END) Phi,
cast(lift as decimal(3)) lift,  count as 'Occur', test
From TB_Rule_Animal_Animal_Soil
where lhs not like '{}' and lhs not like '{nm_cobertura%'	order by test, cast(mon as integer), phi desc;"
dataRes1 <- dbSendQuery(connAssoc, SQLRule)
dsRes1 <- fetch(dataRes1,n = -1)
dsRes1
}
}
connAssoc <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
dat <- dbSendQuery(connMove, "call preparaDadosCobertura();")
#### ******************************************************************************************
####  PREAPARATION:      CONVERT A SHAPEFILE DATA TO MYSQL TABLE - COVER SOIL DATASET         *
#### ******************************************************************************************
#mapa da região do Pantanal - UC Taiamã
#polygons <- sf::read_sf('C:/Users/suela/Downloads/shape_taiama/shape_taiama2.shp')
#mapa da região do Pantanal SUl (Municipio: Aquidauana)
polygons <- sf::read_sf('C:/Users/suela/Downloads/shape_taiama/shape_aquida_2018.shp')
conn <- dbConnect(MySQL(), user="root", db="weka", host="localhost")
data1 <- dbSendQuery(conn, " SELECT distinct lat, lon FROM TB_RST_MovAnimal_Estado;")
df1<- fetch(data1,n = -1)
df1 <- as.data.frame(df1)
points <- df1
# Convert points df to sf object
points <- st_as_sf(points, coords = c("lon", "lat"))
library(raster)
library(sf)
library(RColorBrewer)
library(rgdal)
#### ******************************************************************************************
####  PREAPARATION:      CONVERT A SHAPEFILE DATA TO MYSQL TABLE - COVER SOIL DATASET         *
#### ******************************************************************************************
#mapa da região do Pantanal - UC Taiamã
#polygons <- sf::read_sf('C:/Users/suela/Downloads/shape_taiama/shape_taiama2.shp')
#mapa da região do Pantanal SUl (Municipio: Aquidauana)
polygons <- sf::read_sf('C:/Users/suela/Downloads/shape_taiama/shape_aquida_2018.shp')
conn <- dbConnect(MySQL(), user="root", db="weka", host="localhost")
data1 <- dbSendQuery(conn, " SELECT distinct lat, lon FROM TB_RST_MovAnimal_Estado;")
df1<- fetch(data1,n = -1)
df1 <- as.data.frame(df1)
points <- df1
# Convert points df to sf object
points <- st_as_sf(points, coords = c("lon", "lat"))
st_crs(points) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0" # assign CRS to points
# Plot data
##mapview::mapview(polygons, zcol = "DN") + mapview::mapview(points, color = "white", col.regions = "black")
# Transform points data
pointsT <- st_transform(points, crs = st_crs(polygons))
# Plot transformed data to check is ok
##mapview::mapview(polygons, zcol = "DN") + mapview::mapview(pointsT, color = "white", col.regions = "black")
# Intersection
##overlayOutput <- st_intersects(pointsT, polygons, sparse = TRUE)
da = data.frame("lon" = st_coordinates(pointsT)[,1], "lat" = st_coordinates(pointsT)[,2])
pnts <- da %>% mutate(
intersection = as.integer(st_intersects(pointsT, polygons)), area = if_else(is.na(intersection), '', as.character(polygons$DN)[intersection]))
connMove <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
dbWriteTable(connMove, value = pnts, name = "tb_cobertura_taiama", row.names=F, append = T)
connAssoc <- dbConnect(MySQL(),user="root", db="weka",host="localhost")
dat <- dbSendQuery(connMove, "call preparaDadosCobertura();")
sql <- "SELECT estado, nm_cobertura, individual, concat(year(timestamp),
month(timestamp), individual) as yearmon, year(timestamp) year, month(timestamp) mon
FROM  TB_RST_MovAnimal_Estado_CopiA B "
dataAssoc <- dbSendQuery(connAssoc,sql)
ds <- fetch(dataAssoc,n = -1)
da <- as.data.frame(ds)
yearmon = unique(da$yearmon)
b = 1
Rule = data.frame()
for (b in 1:length(params$minSupConf)){
a = 1
df = data.frame()
#para cada id, ano, mes
for (a in 1:length(yearmon)){
ym = yearmon[a]
dsAssoc <- filter(da, da$yearmon == ym)
year = substr(ym, 1, 4)
#mon = substr(ym, 5, length(da$yearmon ))
if (length(dsAssoc) > 0){
dsAssoc[] <- lapply(dsAssoc, factor)
indiv = unique(dsAssoc$individual)
mon = unique(dsAssoc$mon)
### transforma em transacao para ser utilizado pelo algoritmo apriori
transDados = as(dsAssoc[1:2], "transactions");
rules = apriori(transDados, parameter=list(support=params$minSupConf[b],
confidence=params$minSupConf[b]));
if (length(rules)!= 0){
ruledf = data.frame(id = ym,
ind = indiv,
year= year,
mon = mon,
lhs = labels(lhs(rules)),
rhs = labels(rhs(rules)),
rules@quality,
supA = support(lhs(rules), transDados),
supB = support(rhs(rules), transDados),
supEsp = (support(lhs(rules), transDados) * support(rhs(rules), transDados)),
test =  paste("mSup=", params$minSupConf[b], "/mConf=", params$minSupConf[b], sep = ""),
interestMeasure(rules, c("phi",  "chiSquared"), significance=TRUE, transDados)
)
plot(sort(rules, by="lift"), method="graph",
main= paste("Month/Year:", mon, "/", year, " | minSup:", params$minSupConf[b],  "
|minConf:", params$minSupConf[b],sep=""), control=list(type="items"))
df <- rbind(df, ruledf)
}
}
}
Rule <- rbind(Rule, df)
}
if (length(Rule) > 0) {
name_file = "TB_Rule_Animal_Animal_Soil"
dbWriteTable(connAssoc, value = Rule, name = name_file, append = T)
SQLRule = "select mon, CONCAT(replace(replace (replace(lhs, '{estado=', ''), '}',''),  '{nm_cobertura=', '') , '/',
replace(replace (replace(rhs, '{estado=', ''), '}',''),  '{nm_cobertura=', '') ) state_cover,
supA, supB, cast((IFNULL(CAST(support AS DECIMAL(6,2)), 1)  * 100) as decimal(3))  'Sup',
cast((IFNULL(CAST(confidence AS DECIMAL(6,2)), 1)  * 100) as decimal(3)) 'Conf',
(CASE WHEN  support = 1 and confidence = 1 and phi is null
THEN cast((IFNULL(CAST(phi AS DECIMAL(6,2)), 1)  * 100) as decimal(3))
Else  cast((CAST(phi AS DECIMAL(6,2))  * 100) as decimal(2)) END) Phi,
cast(lift as decimal(3)) lift,  count as 'Occur', test
From TB_Rule_Animal_Animal_Soil
where lhs not like '{}' and lhs not like '{nm_cobertura%'	order by test, cast(mon as integer), phi desc;"
dataRes1 <- dbSendQuery(connAssoc, SQLRule)
dsRes1 <- fetch(dataRes1,n = -1)
dsRes1
}
